# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  node:
    docker:
      # specify the version you desire here
      - image: circleci/node:7.10

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pipeline/package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: cd pipeline && yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "pipeline/package.json" }}


      - run: cd pipeline && node_modules/eslint/bin/eslint.js **/*.js --ignore-pattern dbexampleCSV.js
      #- run: cd pipeline && yarn test

  golang:
    docker:
      # specify the version you desire here
      - image: circleci/golang:1.8

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: /go/src/github.com/sociam/xray-archiver

    steps:
      - checkout

      - run: go get -u github.com/golang/lint/golint

      - run: [[ -z $(gofmt -d **/*.go) ]]

      - run: cd pipeline/util && go get -v -t -d ./...
      - run: cd pipeline/util && golint -set_exit_status
      - run: cd pipeline/util && go vet
      - run: cd pipeline/util && go install
      - run: cd pipeline/util && go test -v ./...

      - run: cd pipeline/db && go get -v -t -d ./...
      - run: cd pipeline/db && golint -set_exit_status
      - run: cd pipeline/db && go vet
      - run: cd pipeline/db && go install
      - run: cd pipeline/db && go test -v ./...

      - run: cd pipeline/apiserv && go get -v -t -d ./...
      - run: cd pipeline/apiserv && golint -set_exit_status
      - run: cd pipeline/apiserv && go vet
      - run: cd pipeline/apiserv && go install
      - run: cd pipeline/apiserv && go test -v ./...

      - run: cd pipeline/analyzer && go get -v -t -d ./...
      - run: cd pipeline/analyzer && golint -set_exit_status
      - run: cd pipeline/analyzer && go vet
      - run: cd pipeline/analyzer && go install
      - run: cd pipeline/analyzer && go test -v ./...

workflows:
  version: 2

  btd:
    jobs:
      - node
      - golang
